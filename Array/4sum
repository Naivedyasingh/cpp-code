#include <vector>
#include <algorithm>
using namespace std;

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());  // Sort the array to facilitate the two-pointer technique
        vector<vector<int>> ans;

        // First loop to choose the first element of the quadruplet
        for (int i = 0; i < nums.size(); i++) {
            // Skip duplicates for the first element
            if (i > 0 && nums[i] == nums[i - 1]) continue;

            // Second loop to choose the second element of the quadruplet
            for (int j = i + 1; j < nums.size(); j++) {
                // Skip duplicates for the second element
                if (j > i + 1 && nums[j] == nums[j - 1]) continue;

                // Two pointers for the third and fourth elements of the quadruplet
                int k = j + 1;
                int l = nums.size() - 1;

                // Two-pointer approach to find the other two elements
                while (k < l) {
                    // Use long long to handle large sums
                    long long sum = (long long)nums[i] + nums[j] + nums[k] + nums[l];
                    
                    if (sum == target) {
                        // Found a quadruplet
                        ans.push_back({nums[i], nums[j], nums[k], nums[l]});

                        // Move `k` and `l` to the next unique elements
                        while (k < l && nums[k] == nums[k + 1]) k++;
                        while (k < l && nums[l] == nums[l - 1]) l--;

                        k++;
                        l--;
                    } 
                    else if (sum < target) {
                        k++;  // Increase sum by moving `k` right
                    } 
                    else {
                        l--;  // Decrease sum by moving `l` left
                    }
                }
            }
        }
        return ans;
    }
};
