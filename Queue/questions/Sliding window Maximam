#include <iostream>
#include <vector>
#include <deque>

using namespace std;

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> result;
        deque<int> dq; // Stores indices of elements in the current window
        
        for (int i = 0; i < nums.size(); ++i) {
            // Remove indices of elements not within the sliding window
            if (!dq.empty() && dq.front() == i - k) {
                dq.pop_front();
            }
            
            // Remove elements smaller than the current element from the back of the deque
            while (!dq.empty() && nums[dq.back()] < nums[i]) {
                dq.pop_back();
            }
            
            // Add the current element's index to the deque
            dq.push_back(i);
            
            // Store the maximum of the current window
            if (i >= k - 1) {
                result.push_back(nums[dq.front()]);
            }
        }
        
        return result;
    }
};

int main() {
    vector<int> nums = {1, 3, -1, -3, 5, 3, 6, 7};
    int k = 3;
    Solution sol;
    vector<int> result = sol.maxSlidingWindow(nums, k);

    for (int x : result) {
        cout << x << " ";
    }
    cout << endl;

    return 0;
}














#include <iostream>
#include <vector>

using namespace std;

vector<int> maxSlidingWindow(vector<int>& nums, int k) {
    vector<int> result;
    int n = nums.size();

    // Outer loop for the starting index of each window
    for (int i = 0; i <= n - k; ++i) {
        int maxElement = nums[i];

        // Inner loop to find the maximum in the current window
        for (int j = i; j < i + k; ++j) {
            if (nums[j] > maxElement) {
                maxElement = nums[j];
            }
        }

        // Store the maximum element of the current window
        result.push_back(maxElement);
    }

    return result;
}

int main() {
    vector<int> nums = {1, 3, -1, -3, 5, 3, 6, 7};
    int k = 3;
    vector<int> result = maxSlidingWindow(nums, k);

    for (int x : result) {
        cout << x << " ";
    }
    cout << endl;

    return 0;
}

