#include <iostream>
#include <vector>
#include <stack>
#include <string>
#include <cctype> // For isdigit

using namespace std;

class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        stack<int> s;
        
        for (size_t i = 0; i < tokens.size(); ++i) {
            const string& token = tokens[i];
            if (isdigit(token[0]) || (token.size() > 1 && token[0] == '-' && isdigit(token[1]))) {
                // It's a number (handle negative numbers as well)
                s.push(stoi(token));
            } else {
                // It's an operator
                int b = s.top(); s.pop();
                int a = s.top(); s.pop();
                int result = 0;
                
                if (token == "+") {
                    result = a + b;
                } else if (token == "-") {
                    result = a - b;
                } else if (token == "*") {
                    result = a * b;
                } else if (token == "/") {
                    result = a / b;
                }
                
                s.push(result);
            }
        }
        
        return s.top();
    }
};

int main() {
    Solution sol;

    // Test Case 1
    vector<string> tokens1 = {"2","1","+","3","*"};
    cout << "Result of tokens1: " << sol.evalRPN(tokens1) << endl; // Output: 9

    // Test Case 2
    vector<string> tokens2 = {"4","13","5","/","+"};
    cout << "Result of tokens2: " << sol.evalRPN(tokens2) << endl; // Output: 6

    // Test Case 3
    vector<string> tokens3 = {"10","6","9","3","+","-11","*","/","*","17","+","5","+"};
    cout << "Result of tokens3: " << sol.evalRPN(tokens3) << endl; // Output: 22

    return 0;
}
