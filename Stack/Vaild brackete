#include <iostream>
#include <stack>
#include <string>
using namespace std;

bool isValidParenthesis(string expression) {
    stack<char> s;
    for(int i = 0; i < expression.length(); i++) {
        char ch = expression[i];
        
        // if opening bracket, push to stack
        // if closing bracket, check stack top and pop
        if(ch == '(' || ch == '{' || ch == '[') {
            s.push(ch);
        } else {
            // for closing bracket
            if(!s.empty()) {
                char top = s.top();
                if((ch == ')' && top == '(') || 
                   (ch == '}' && top == '{') || 
                   (ch == ']' && top == '[')) {
                    s.pop();
                } else {
                    return false;  // mismatched pair
                }
            } else {
                return false;  // no matching opening bracket
            }
        }
    }
    
    // if stack is empty, all opening brackets were matched
    return s.empty();
}

int main() {
    string expression1 = "({[]})";
    string expression2 = "({[)]}";
    
    cout << "Expression 1: " << (isValidParenthesis(expression1) ? "Valid" : "Invalid") << endl;
    cout << "Expression 2: " << (isValidParenthesis(expression2) ? "Valid" : "Invalid") << endl;
    
    return 0;
}
